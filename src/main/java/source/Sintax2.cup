package source;

import java_cup.runtime.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import java.util.LinkedList;
import source.TError;

action code {:
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    HashMap<String, ArrayList<ArrayList<String>>> listaTablasSimbolosSemantico = new HashMap<String, ArrayList<ArrayList<String>>>();
    ArrayList<ArrayList<String>> listaFunciones = new ArrayList<ArrayList<String>>();
    String currentHash = "globalTs";
    String globalHash = "globalTs";
    StringBuffer cod3D = new StringBuffer();
    StringBuffer cod3D_data = new StringBuffer();
    int currentTemp = 0;
    boolean errorSemantico = false;
    int casesCurrent = 0;
    int currentParam = 0;
    ArrayList<String> tempParam;

    public void verificarDatosFuncionParametros(String[] datos) {
        if (verificarParametrosCall(datos[1])) {
            cod3D.append("goto begin_Func_"+datos[0]+"\n");
        } else {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: Parametros no hacen match -> " + datos[0] + "\n");
        }
        tempParam.remove(0);
    }

    public boolean verificarParametrosCall(String id) {
        if (tempParam.size() == 0) {
            return false;
        }
        String[] res = tempParam.get(0).split(":");
        if (res[0].equals(id)) {
            return true;
        }
        return false;
    }

    public void prepararDatosFuncionCallAux(String id) {

        for (ArrayList<String> lista : listaFunciones) {
            String[] res = lista.get(0).split(":");
            if (res[1].equals(globalHash)) {
                tempParam = new ArrayList<>(lista);
                tempParam.remove(0);
                break;
            }
        }
    }

    public void prepararDatosFuncionCall(String id) {
        if (existeTabla(id)) {
            globalHash = id;
            prepararDatosFuncionCallAux(id);
        } else {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: funcion " + id + " no declarado\n");
        }
    }

    public void agregarFuncion(String tipo, String name) {
        ArrayList<String> lista = new ArrayList<String>();
        lista.add(tipo+":"+name);
        listaFunciones.add(lista);
    }

    public void agregarParametros(String tipo, String name) {
        String[] res = currentHash.split(":");
        for (ArrayList<String> lista : listaFunciones) {
            String[] resp = lista.get(0).split(":");
            if (resp[1].equals(res[1])) {
                lista.add(tipo+":"+name);
                break;
            }
        }
    }

    public void agregarTabla(String name, String tipo) {
        if(existeTabla(name)) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: funcion " + name + " ya declarado\n");
        } else {
            agregarFuncion(tipo, name);
        }
        currentHash = tipo + ":" + name;
        listaTablasSimbolosSemantico.put(currentHash, new ArrayList<ArrayList<String>>());
        listaTablasSimbolos.put(currentHash, new ArrayList<String>());
        cod3D.append("begin_Func_"+name+":\n");
    }

    public void verificarCreacion(String id, String tipo, String[] valor) {
        System.out.println("VerificarCreacion id:" + id + " tipo:" + tipo + " valor:" + valor[1]);
        if (existeEnTabla(id)) {
            listaTablasSimbolos.get(currentHash).add("Error: Identificador " + id + " ya declarado\n");
            errorSemantico = true;
        } else {
            if (!valor[1].equals("NULL") && !tipo.equals(valor[1])) {
                listaTablasSimbolos.get(currentHash).add("Error: Tipos no hacen match -> " + id + "\n");
            }
        }
        ArrayList<String> lista = new ArrayList<String>();
        lista.add(tipo);
        lista.add(id);
        lista.add(valor[0]);
        listaTablasSimbolosSemantico.get(currentHash).add(lista);
        listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor[0]);
        String Res = currentHash.split(":")[1];
        cod3D_data.append("variable_"+Res+"_"+id+"="+valor[0]+"\n");
    }

    public void verificarIdentificador(String id, String valor) {
        String[] resp = valor.split(":");
        cod3D.append(id+"="+resp[2]+"\n");
        listaTablasSimbolos.get(currentHash).add(id + "=" + resp[0]);  
        if (!buscarPorValor(id)) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: Identificador " + id + " no declarado\n");
        } else {
            String res = obtenerTipoDeTabla(id);
            if (!res.equals(resp[1])) {
                listaTablasSimbolos.get(currentHash).add("Error: Tipos no hacen match -> " + id + "\n");
            }
        }
    }

    public void verificarIdentificadorAtrib(String id, String valor, String simb) {
        String[] resp = valor.split(":");
        cod3D.append(id+"="+resp[0]+"\n");
        String currentTemp1 = "t"+currentTemp;
        cod3D.append(currentTemp1+"="+id+"\n");
        currentTemp++;
        String currentTemp2 = "t"+currentTemp;
        cod3D.append(currentTemp2+"="+resp[1]+"\n");
        currentTemp++;
        String currentTemp3 = "t"+currentTemp;
        cod3D.append(currentTemp3+"="+currentTemp1+simb+currentTemp2+"\n");
        currentTemp++;
        listaTablasSimbolos.get(currentHash).add(id + "=" + currentTemp3);
        if (buscarPorValor(id)) {
            String tipo = obtenerTipoDeTabla(id);
            if (!tipo.equals(resp[1])) {
                errorSemantico = true;
                listaTablasSimbolos.get(currentHash).add("Error: Tipos de -> " + id + " no compatible\n"); 
            }
        } else {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: Identificador -> " + id + " <- no declarado\n");
        }
    }

    public boolean existeTabla(String valor) {

        for (String clave : listaTablasSimbolosSemantico.keySet()) {
            String[] res = clave.split(":");
            if (res[1].equals(valor)) {
                return true;
            }
        }
        return false;
    }

    public boolean buscarPorValor(String valor) {
        ArrayList<ArrayList<String>> listaDeListas = listaTablasSimbolosSemantico.get(currentHash);
        for (ArrayList<String> lista : listaDeListas) {
            String partes = lista.get(1);
            if (partes.equals(valor)) {
                return true;
            }
        }
        return false;
    }

    public int buscarSimbolo (String id, ArrayList<ArrayList<String>> lista) {
        int index = -1;
        for (int i = 0; i < lista.size(); i++) {
            if (lista.get(i).get(1).equals(id)) {
                index = i;
                break;
            }
        }
        return index;
    }


    public String verificarDatosOpeMatematicos(String f1, String f2, String simb) {
        String[] resp1 = f1.split(":");
        String[] resp2 = f2.split(":");
        String res = resp1[0]+simb+resp2[0];
        String diario = "t"+currentTemp;
        listaTablasSimbolos.get(currentHash).add(res);
        cod3D.append(diario+"="+resp1[2]+simb+resp2[2]+"\n");
        currentTemp++;
        if ((resp1[1].equals("float") || resp1[1].equals("int")) && (resp2[1].equals("int") || resp2[1].equals("float"))) {
            if (resp1[1].equals("float") || resp2[1].equals("float")) {
                return res+":float:"+diario;
            } else {
                return res+":int:"+diario;
            }
        } else{
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: Operacion solo acepta numeros en " + res + "\n");
            return res+":int:"+diario;
        }

    }

    public String verificarDatosOpeLogicos(String f1, String f2, String simb) {
        String[] resp1 = f1.split(":");
        String[] resp2 = f2.split(":");
        String res = resp1[0]+simb+resp2[0];
        String diario = "t"+currentTemp;
        listaTablasSimbolos.get(currentHash).add(res);
        cod3D.append(diario+"="+resp1[2]+simb+resp2[2]+"\n");
        currentTemp++;
        if (!resp1[1].equals("bool") && !resp2[1].equals("bool")) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: Modulo solo acepta booleanos en " + res + "\n");

        }
        return res+":bool:"+diario;
    }

    public String verificarDatosOpeRelacional(String f1, String f2, String simb) {
        String[] resp1 = f1.split(":");
        String[] resp2 = f2.split(":");
        String res = resp1[0]+simb+resp2[0];
        String diario = "t"+currentTemp;
        listaTablasSimbolos.get(currentHash).add(res);
        cod3D.append(diario+"="+resp1[2]+simb+resp2[2]+"\n");
        currentTemp++;
        if (!(resp1[1].equals("float") || resp1[1].equals("int")) || !(resp2[1].equals("int") || resp2[1].equals("float"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: Modulo solo acepta numeros en " + res + "\n");
        }
        return res+":bool:"+diario;
    }


    public String obtenerTipoDeTabla(String id) {
        ArrayList<ArrayList<String>> tabla = listaTablasSimbolosSemantico.get(currentHash);
        int busqueda = buscarSimbolo(id, tabla);
        return listaTablasSimbolosSemantico.get(currentHash).get(busqueda).get(0);
    }

    public boolean existeEnTabla(String id) {
        ArrayList<ArrayList<String>> tabla = listaTablasSimbolosSemantico.get(currentHash);
        int busqueda = buscarSimbolo(id, tabla);
        if (busqueda==-1) {
            return false;
        }
        return true;
    }


    public void imprimir3D() {
        System.out.println("Codigo 3D");
        System.out.println(cod3D.toString());
    }

    public void imprimirTablaSimbolos() {
        for (String key: listaTablasSimbolos.keySet()) {
            System.out.println("Tabla de simbolos: " + key);
            System.out.println("Identificador\tTipo\tValor");
            for (String id: listaTablasSimbolos.get(key)) {
                System.out.println(id);
            }
            System.out.println("\n");
        }
    }

    public void StringToFile() {
        String contenido = cod3D_data.toString();

        // Ruta del archivo de texto
        String rutaArchivo = "3D_Code.txt";

        try {
            // Crear un objeto File que representa el archivo
            File archivo = new File(rutaArchivo);

            // Crear un FileWriter para escribir en el archivo
            FileWriter fileWriter = new FileWriter(archivo);

            // Crear un BufferedWriter para mejorar el rendimiento de escritura
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

            // Crear un PrintWriter para escribir el contenido en el archivo
            PrintWriter printWriter = new PrintWriter(bufferedWriter);

            // Escribir el contenido en el archivo
            printWriter.println(contenido);

            // Cerrar los flujos
            printWriter.close();
            bufferedWriter.close();
            fileWriter.close();

            System.out.println("El archivo ha sido creado con éxito.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

:}

parser code {:

    public static LinkedList<TError> TablaError = new LinkedList<TError>();

    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;
        System.out.println("Lexema erroneo: "+lexema+" Fila: "+ fila+1 +" Columna: "+ columna);
        
        TError datos = new TError(lexema,fila,columna,"ERROR SINTACTICO","ERROR DE CARACTER");
        TablaError.add(datos);
    }

    public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("Lexema erroneo=> "+lexema);
        System.out.println("Fila=> "+ fila+1);
        System.out.println("Columna=> " +columna);

        TError datos = new TError(lexema,fila,columna,"ERROR SINTACTICO","ERROR DE CARACTER");
        TablaError.add(datos);
    }
    
    // Connect this parser to a scanner!

    LexerCup lex;

 

    @SuppressWarnings("deprecation")

    public Sintax(LexerCup lex){

        this.lex=lex;

        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

init with {: :}

 
/* define how to connect to the scanner! */

scan with {: return lex.next_token(); :}

//Declaraciones terminales
terminal Char, Entero, Flotante, Booleano, Cadena, If, Else, While, For,
    Igual, Suma, Resta, Multiplicacion, Division, Potencia, Modulo, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Main, P_coma, Identificador, P_dospuntos, Case_, 
    Switch, Separador, Break, Return, Global, Float, Cadena_String, Cadena_Char, Coma, Default,
    Numero, Read, Write, Coment_Comp, Coment_Simp;

//Declaraciones no terminales 
non terminal PROGRAMA, TIPOS, EXPRESION, TERMINO, FACTOR, NUMEROS, CADENAS, SENTENCIA, SENTENCIAS,
    ASIGNACION, CREACION, CREACION_ASIGNACION, OPERA_RELACIONAL, OPERA_LOGICO, IF_ELSE, WHILE, FOREACH,
    GLOBALES, GLOBAL, MAIN, PARAMETROS, FUNCION, FUNCIONES, SWITCH, CASES, CASE_, RETURN, READ, WRITE, INICIO,
    FUNCION_CALL, PARAMETROS_CALL, PARAMETRO_CALL, FUNCION_CUERPO, MAIN_CUERPO, FUNCION_BODY, IF_ELSE_CUERPO,
    WHILE_CUERPO, FOR_EACH_CUERPO, SWITCH_CUERPO, PARAMETRO, DEFAULT_, CASES_, FOR_AISGNACION, FUNCION_CALL_BODY;

//Precedencias
precedence left Suma, Resta;
precedence left EXPRESION, P_coma;
precedence left OPERA_RELACIONAL, Op_relacional;
precedence left OPERA_LOGICO, Op_logico;
precedence left Multiplicacion, Division;
precedence left Entero, Flotante, Booleano, Cadena, Char;
precedence left PARAMETRO_CALL, OPERA_RELACIONAL;
precedence left ASIGNACION, CREACION_ASIGNACION, CREACION, IF_ELSE, WHILE,
    FOREACH, SWITCH, READ, WRITE, FUNCION_CALL, RETURN;
precedence left  If, Else;

start with INICIO;

//Producciones

INICIO ::=
    {: 
        System.out.println("PARCER: Inicio programa\n");
        cod3D_data.append("DATA:\n");
        agregarTabla("globalTs", "globalTs");
    :}
    PROGRAMA
    {: 
        imprimirTablaSimbolos();
        if (!errorSemantico) {
            cod3D_data.append(cod3D);
            imprimir3D();
            StringToFile();
        } else {
            System.out.println("Error semantico, se aborto generacion de codigo 3D");
        }
        System.out.println("PARCER: Final programa\n");
    :}
;

PROGRAMA ::=
    GLOBALES
    | MAIN
    | GLOBALES MAIN
    | GLOBALES MAIN FUNCIONES
    | MAIN FUNCIONES
    | FUNCIONES
    | GLOBALES FUNCIONES
;

FUNCIONES ::=
    FUNCION
    | FUNCION FUNCIONES
;

FUNCION_CUERPO ::=
    TIPOS:tVG Separador Identificador:idVG
    {:
        System.out.println("Inicio funcion");
        agregarTabla(idVG.toString(), tVG.toString());
    :}
;

FUNCION ::=
    FUNCION_CUERPO FUNCION_BODY
;

FUNCION_BODY ::=
    Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c
    | Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIAS Llave_c
    | error Llave_c
;

MAIN_CUERPO ::=
    TIPOS:tVG Separador Main:idVG
    {:
        System.out.println("Inicio main");
        agregarTabla(idVG.toString(), tVG.toString());
    :}
;

MAIN ::=
    MAIN_CUERPO FUNCION_BODY
;

FUNCION_CALL_BODY ::=
    Identificador:idVG
    {:
        prepararDatosFuncionCall(idVG.toString());
        RESULT = idVG.toString();
    :}
;

FUNCION_CALL ::=
    FUNCION_CALL_BODY:idVG Parentesis_a Parentesis_c P_coma
    {:
        cod3D.append("goto " + idVG.toString());
    :}
    | FUNCION_CALL_BODY:idVG Parentesis_a PARAMETROS_CALL Parentesis_c P_coma
    {:
        cod3D.append("goto " + idVG.toString());
    :}
;

PARAMETROS_CALL ::=
    PARAMETRO_CALL:e
    {:
        if (!errorSemantico) {
            verificarDatosFuncionParametros(e.toString().split(":"));
        }
    :}
    | PARAMETROS_CALL Coma PARAMETRO_CALL:e
    {:
        if (!errorSemantico) {
            verificarDatosFuncionParametros(e.toString().split(":"));
        }    
    :}
;

PARAMETRO_CALL ::=
    CADENAS:e {: RESULT=e; :}
    | OPERA_LOGICO:e {: RESULT=e; :}
    | FUNCION_CALL:e {: RESULT=e; :}
    | ASIGNACION:e {: RESULT=e; :}
;

PARAMETRO ::=
    TIPOS:tVG Separador Identificador:idVG
    {:
        verificarCreacion(idVG.toString(), tVG.toString(), "NULL:NULL:NULL".split(":"));
        agregarParametros(tVG.toString(), idVG.toString());
        System.out.println("PARSER: identificador parametro " + idVG.toString());
    :}
;

PARAMETROS ::=
    PARAMETRO
    | PARAMETRO Coma PARAMETROS
;

SENTENCIAS ::=
    SENTENCIA
    | SENTENCIA SENTENCIAS
;

SENTENCIA ::=
    ASIGNACION
    | CREACION_ASIGNACION
    | CREACION
    | IF_ELSE
    | WHILE
    | FOREACH
    | SWITCH
    | READ
    | WRITE
    | FUNCION_CALL
    | Coment_Simp
    | Coment_Comp
    | RETURN
;

READ ::=
    Read Parentesis_a Identificador:idVG Parentesis_c P_coma
    {:
        if (existeEnTabla(idVG.toString())) {
            String tipo = obtenerTipoDeTabla(idVG.toString());
            if (tipo.equals("int") || tipo.equals("float")) {
                cod3D.append("read "+idVG.toString()+"\n");
            } else {
                errorSemantico = true;
                listaTablasSimbolos.get(currentHash).add("Error: Identificador " + idVG.toString() + " no es de tipo int o float\n");
            
            }
        } else {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: Identificador " + idVG.toString() + " no declarado\n");
        }
        listaTablasSimbolos.get(currentHash).add("read "+idVG.toString());
    :}
;

WRITE ::=
    Write Parentesis_a Identificador:idVG Parentesis_c P_coma
    {:
        if (existeEnTabla(idVG.toString())) {
            String tipo = obtenerTipoDeTabla(idVG.toString());
            if (tipo.equals("int") || tipo.equals("float")) {
                cod3D.append("write "+idVG.toString()+"\n");
            } else {
                errorSemantico = true;
                listaTablasSimbolos.get(currentHash).add("Error: Identificador " + idVG.toString() + " no es de tipo int o float\n");
            
            }
        } else {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: Identificador " + idVG.toString() + " no declarado\n");
        }
        listaTablasSimbolos.get(currentHash).add("read "+idVG.toString());
    :}
;

RETURN ::=
    Return EXPRESION P_coma
    | Return P_coma
    | Return CADENAS P_coma
    | Return OPERA_LOGICO P_coma
    | Return NUMEROS P_coma
    | Return Identificador P_coma
;

GLOBALES ::=
    GLOBAL
    | GLOBAL GLOBALES
;

GLOBAL ::=
    Global Separador CREACION_ASIGNACION
    | Global Separador CREACION
;

SWITCH_CUERPO ::=
    Switch Parentesis_a Identificador:idVG Parentesis_c
    {:
        if (!existeEnTabla(idVG.toString())) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: Identificador " + idVG.toString() + " ya declarado\n");
        }
        casesCurrent = 0;

        String temp = "t"+currentTemp;
        String res = currentHash.split(":")[1];
        currentTemp++;
        cod3D.append("SWITCH_"+res+":\n");
        cod3D.append(temp+idVG.toString()+":\n");
    :}
;

SWITCH ::=
    SWITCH_CUERPO Llave_a CASES_ Llave_c
    {:
    String res = currentHash.split(":")[1];
        cod3D.append("END_SWITCH_"+res+"\n");
    :}
;

CASES_ ::=
    CASES DEFAULT_
;

CASES ::=
    CASES CASE_
    | CASE_
    {:
        String res = currentHash.split(":")[1];
         cod3D.append("END_CASE_"+res+"_"+casesCurrent+":\n");
    :}
;

DEFAULT_ ::=
    Default P_dospuntos SENTENCIAS Break P_coma
    {:
        String res = currentHash.split(":")[1];
        cod3D.append("Default_CASE_"+res+"_"+casesCurrent+":\n");
    :}
;

CASE_ ::=
    Case_ Separador NUMEROS:e P_dospuntos SENTENCIAS Break P_coma
    {:
        String[] resp = e.toString().split(":");
        cod3D.append("jumif "+(e.toString())+"==t"+(currentTemp-1)+" goto CASE_"+currentHash+"_"+casesCurrent+"\n");
        cod3D.append("goto END_CASE_"+resp+"_"+casesCurrent+"\n");
        cod3D.append("CASE_"+resp+"_"+casesCurrent+":\n");
    :}
;

FOR_AISGNACION ::= 
    TIPOS:tVG1 Separador Identificador:idVG1 Igual Numero:e1
    {:
        String respT = currentHash.split(":")[1];
        cod3D.append("FOR_EACH_"+respT+":\n");
        String resp = e1.toString() + ":int:t"+currentTemp;
        verificarCreacion(idVG1.toString(), tVG1.toString(), resp.split(":"));
        String res = "t"+currentTemp;
        cod3D.append(res+"="+e1.toString()+"\n");
        cod3D_data.append("variable_forEach_"+respT+"_"+idVG1.toString()+"="+e1.toString()+"\n");
        currentTemp++;
        RESULT = e1.toString()+":"+tVG1.toString()+":"+res;
    :}
;

FOR_EACH_CUERPO ::=
    For Parentesis_a FOR_AISGNACION:e1 P_coma OPERA_RELACIONAL:op P_coma Identificador:idVG2 Op_incremento:e2 Parentesis_c
    {:
        String respT = currentHash.split(":")[1];
        cod3D.append("jumif "+(e1.toString())+"==t"+(currentTemp-1)+" goto FOR_EACH_"+respT+"\n");
        String resp = "1:int:t"+currentTemp;
        if (e2.toString().equals("++")) {
            verificarIdentificadorAtrib(idVG2.toString(), resp, "+");
        } else {
            verificarIdentificadorAtrib(idVG2.toString(), resp, "-");
        
        }
        String[] resp1 = e1.toString().split(":");
    :}
;

FOREACH ::=
    FOR_EACH_CUERPO:e Llave_a SENTENCIAS Llave_c
    {:
        cod3D.append("goto FOR_EACH_"+currentHash.split(":")[1]+"\n");
    :}
;

WHILE_CUERPO ::=
    While Parentesis_a OPERA_LOGICO:e Parentesis_c
    {:
        String[] resp = e.toString().split(":");
        String res = currentHash.split(":")[1];
        if (!errorSemantico) {
            cod3D.append("PRE_WHILE_"+res+":\n");
            cod3D.append("jumif "+(resp[2])+" goto WHILE_"+res+"\n");
            cod3D.append("goto WHILE_ELSE_"+res+"\n");
            cod3D.append("WHILE_"+res+":\n");
        }
    :}
;

WHILE ::=
    WHILE_CUERPO Llave_a SENTENCIAS Llave_c Else Llave_a SENTENCIAS Llave_c
    {:
            String res = currentHash.split(":")[1];
            cod3D.append("goto PRE_WHILE_"+res+"\n");
            cod3D.append("WHILE_ELSE_"+res+":\n");
        
    :}
;

IF_ELSE_CUERPO ::=
    If Parentesis_a OPERA_LOGICO:e Parentesis_c
    {:
        String[] resp = e.toString().split(":");
        String res = currentHash.split(":")[1];
            cod3D.append("jumif "+(resp[2])+" goto IF_"+res+"\n");
            cod3D.append("goto ELSE_"+res+"\n");
            cod3D.append("IF_"+res+":\n");
        
    :}
    | Else
    {:
        String res = currentHash.split(":")[1];
        cod3D.append("ELSE_"+res+":\n");
        
    :}
;

IF_ELSE ::=
    IF_ELSE_CUERPO Llave_a SENTENCIAS Llave_c
    | IF_ELSE_CUERPO Llave_a SENTENCIAS Llave_c IF_ELSE_CUERPO Llave_a SENTENCIAS Llave_c
;

CREACION_ASIGNACION ::=
    TIPOS:tVG Separador Identificador:idVG Igual CADENAS:e P_coma
    {:
        String[] resp = e.toString().split(":");
        verificarCreacion(idVG.toString(), tVG.toString(), resp);
        cod3D.append(idVG.toString()+"="+resp[2]+"\n");
        System.out.println("PARSER: identificador " + idVG.toString());
    :}
    | TIPOS:tVG Separador Identificador:idVG Igual EXPRESION:e P_coma
    {:
        String[] resp = e.toString().split(":");
        verificarCreacion(idVG.toString(), tVG.toString(), resp);
        cod3D.append(idVG.toString()+"="+resp[2]+"\n");
        System.out.println("PARSER: identificador " + idVG.toString());
    :}
    | TIPOS:tVG Separador Identificador:idVG Igual OPERA_LOGICO:e P_coma
    {:
        String[] resp = e.toString().split(":");
        verificarCreacion(idVG.toString(), tVG.toString(), resp);
        cod3D.append(idVG.toString()+"="+resp[2]+"\n");
        System.out.println("PARSER: identificador " + idVG.toString());
    :}
    | error P_coma
;

CREACION ::=
    TIPOS:tVG Separador Identificador:idVG P_coma
    {:
        String res = "NULL:NULL:NULL";
        String[] resp = res.split(":");
        verificarCreacion(idVG.toString(), tVG.toString(), resp);
        System.out.println("PARSER: identificador " + idVG.toString());
    :}
;

ASIGNACION ::=
    Identificador:idVG  Op_atribucion:op EXPRESION:e P_coma
    {:
        verificarIdentificadorAtrib(idVG.toString(), e.toString(), op.toString());
    :}
    | Identificador:idVG Igual EXPRESION:e P_coma
    {:
        verificarIdentificador(idVG.toString(), e.toString());
    :}
    | Identificador:idVG Op_incremento:e P_coma
    {:
        String resp = "1:int:t"+currentTemp;
        if (e.toString().equals("++")) {
            verificarIdentificadorAtrib(idVG.toString(), resp, "+");
        } else {
            verificarIdentificadorAtrib(idVG.toString(), resp, "-");
        }
    :}
    | Identificador:idVG Igual CADENAS:e P_coma
    {:
        verificarIdentificador(idVG.toString(), e.toString());
    :}
    | Identificador:idVG Igual OPERA_LOGICO:e P_coma
    {:
        verificarIdentificador(idVG.toString(), e.toString());
    :}

;   

OPERA_RELACIONAL ::=
    OPERA_RELACIONAL:e1 Op_relacional:s OPERA_RELACIONAL:e2 
    {: 
        String respito = verificarDatosOpeRelacional(e1.toString(), e2.toString(), s.toString());
        RESULT = respito;
    :}
    | EXPRESION:e {: RESULT = e; :}
;

OPERA_LOGICO ::=
    OPERA_LOGICO:e1 Op_logico:s OPERA_LOGICO:e2 
    {: 

        String respito = verificarDatosOpeLogicos(e1.toString(), e2.toString(), s.toString());
        RESULT = respito;

    :}
    | OPERA_RELACIONAL:e 
    {:
        RESULT = e;
    :}
    | Op_booleano:e 
    {: 
        String res = "t"+currentTemp;
        cod3D.append(res+"="+e.toString()+"\n");
        currentTemp++;
        RESULT = e+":bool:"+res;
    :}
;

EXPRESION ::=
    TERMINO:e {: RESULT = e; :}
    | EXPRESION:e1 Suma:s TERMINO:e2 
    {: 
        String respito = verificarDatosOpeMatematicos(e1.toString(), e2.toString(), s.toString());
        RESULT = respito; 
    :}
    | EXPRESION:e1 Resta:s TERMINO:e2
    {: 
        String respito = verificarDatosOpeMatematicos(e1.toString(), e2.toString(), s.toString());
        RESULT = respito; 
    :}
;

TERMINO ::=
    FACTOR:e {: RESULT = e; :}
    | TERMINO:e1 Multiplicacion:s FACTOR:e2
    {: 
        String respito = verificarDatosOpeMatematicos(e1.toString(), e2.toString(), s.toString());
        RESULT = respito; 
    :}
    | TERMINO:e1 Division:s FACTOR:e2
    {: 
        String respito = verificarDatosOpeMatematicos(e1.toString(), e2.toString(), s.toString());
        RESULT = respito; 
    :}
    | TERMINO:e1 Potencia:s FACTOR:e2
    {: 
        String respito = verificarDatosOpeMatematicos(e1.toString(), e2.toString(), s.toString());
        RESULT = respito; 
    :}
    | TERMINO:e1 Modulo:s FACTOR:e2
    {: 
        String respito = verificarDatosOpeMatematicos(e1.toString(), e2.toString(), s.toString());
        RESULT = respito; 
    :}
;

FACTOR ::=
    NUMEROS:e {: RESULT = e; :}
    | Identificador:e
    {:
        listaTablasSimbolos.get(currentHash).add(e.toString());
        String res = "t"+currentTemp;
        cod3D.append(res+"="+e.toString()+"\n");
        currentTemp++;
        if (!existeEnTabla(e.toString())) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add("Error: Identificador " + e.toString() + " ya declarado\n");
            RESULT = e.toString()+":NULL:"+res;
        } else {
            String tipo = obtenerTipoDeTabla(e.toString());
            RESULT = e.toString()+":"+tipo+":"+res;
        }
    :}
    | Parentesis_a EXPRESION:e Parentesis_c {: RESULT = e; :}
;

TIPOS ::= 
      Entero {: RESULT = "int"; :}
    | Flotante {: RESULT = "float"; :}
    | Booleano {: RESULT = "bool"; :}
    | Cadena {: RESULT = "string"; :}
    | Char {: RESULT = "char"; :}
;

NUMEROS ::=
    Float:e 
    {:
        String res = "f"+currentTemp;
        cod3D.append(res+"="+e.toString()+"\n");
        currentTemp++;
        RESULT = e+":float:"+res;
    :}
    | Numero:e
    {:
        String res = "t"+currentTemp;
        cod3D.append(res+"="+e.toString()+"\n");
        currentTemp++;
        RESULT = e+":int:"+res;
    :}
;

CADENAS ::=
    Cadena_Char:e
    {:
        String res = "t"+currentTemp;
        cod3D.append(res+"="+e.toString()+"\n");
        currentTemp++;
        RESULT = e+":char:"+res;
    :}
    | Cadena_String:e
    {:
        String res = "t"+currentTemp;
        cod3D.append(res+"="+e.toString()+"\n");
        currentTemp++;
        RESULT = e+":string:"+res;
    :}
;