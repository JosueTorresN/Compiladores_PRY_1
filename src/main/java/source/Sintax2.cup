package source;

import java_cup.runtime.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import java.util.LinkedList;
import source.TError;

action code {:
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    HashMap<String, ArrayList<ArrayList<String>>> listaTablasSimbolosSemantico = new HashMap<String, ArrayList<ArrayList<String>>>();
    String currentHash = "globalTs";
    String globalHash = "globalTs";
    StringBuffer cod3D = new StringBuffer();
    int currentTemp = 0;
    boolean errorSemantico = false;
    int casesCurrent = 0;

    public void guardarTablaSimbolosAsig(String id, String valor) {
        ArrayList<ArrayList<String>> tabla = listaTablasSimbolosSemantico.get(currentHash);
        int busqueda = buscarSimbolo(id, tabla);
        if (busqueda!=-1) {
            guardarTablaSimbolosAsigAux(id, valor, busqueda);
        } else {
            listaTablasSimbolos.get(currentHash).add("Identificador: " + id + " <- no declarado");
        }
    }

    public void guardarTablaSimbolosAsigAux(String id, String valor, int index) {
        String tipo = listaTablasSimbolosSemantico.get(currentHash).get(index).get(0);
        ArrayList<String> lista = new ArrayList<String>();
        if(tipo.equals("int") && !(valor.matches("[0-9]+") || valor.equals("--") || valor.equals("++") || valor.equals("+=") || valor.equals("-=") || valor.equals("*=") || valor.equals("/=") || valor.equals("%=") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo int");
        } else if(tipo.equals("float") && !(valor.matches("[0-9]+.[0-9]+") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo float");
        } else if(tipo.equals("bool") && !(valor.equals("true") || valor.equals("false") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo bool");
        } else if(tipo.equals("string") && !(valor.matches("\"[a-zA-Z0-9]+\"") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo string");
        } else if(tipo.equals("char") && !(valor.matches("\'[a-zA-Z0-9]+\'") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo char");
        } else {
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor);
        }
        lista.add(tipo);
        lista.add(id);
        lista.add(valor);
        listaTablasSimbolosSemantico.get(currentHash).set(index, lista);
    }

    public void guardarTablaSimbolosCreacionAsig(String id, String tipo, String valor) {
        ArrayList<ArrayList<String>> tabla = listaTablasSimbolosSemantico.get(currentHash);
        int busqueda = buscarSimbolo(id, tabla);
        if (busqueda!=-1) {
            
            guardarTablaSimbolosCreacionAsigAuxExist(id, tipo, valor, busqueda);
        } else {
            guardarTablaSimbolosCreacionAsigAuxNoExist(id, tipo, valor);
        }
    }

    public void guardarTablaSimbolosCreacionAsigAuxExist(String id, String tipo, String valor, int index) {
        ArrayList<String> lista = new ArrayList<String>();
        if(tipo.equals("int") && !(valor.matches("[0-9]+") || valor.equals("--") || valor.equals("++") || valor.equals("+=") || valor.equals("-=") || valor.equals("*=") || valor.equals("/=") || valor.equals("%=") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo int");
        } else if(tipo.equals("float") && !(valor.matches("[0-9]+.[0-9]+") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo float");
        } else if(tipo.equals("bool") && !(valor.equals("true") || valor.equals("false") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo bool");
        } else if(tipo.equals("string") && !(valor.matches("\"[a-zA-Z0-9]+\"") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo string");
        } else if(tipo.equals("char") && !(valor.matches("\'[a-zA-Z0-9]+\'") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo char");
        } else {
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor);
        }
        lista.add(tipo);
        lista.add(id);
        lista.add(valor);
        listaTablasSimbolosSemantico.get(currentHash).set(index, lista);
    }

    public void guardarTablaSimbolosCreacionAsigAuxNoExist(String id, String tipo, String valor) {
        ArrayList<String> lista = new ArrayList<String>();
        if(tipo.equals("int") && !(valor.matches("[0-9]+") || valor.equals("--") || valor.equals("++") || valor.equals("+=") || valor.equals("-=") || valor.equals("*=") || valor.equals("/=") || valor.equals("%=") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo int");
        } else if(tipo.equals("float") && !(valor.matches("[0-9]+.[0-9]+") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo float");
        } else if(tipo.equals("bool") && !(valor.equals("true") || valor.equals("false") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo bool");
        } else if(tipo.equals("string") && !(valor.matches("\"[a-zA-Z0-9]+\"") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo string");
        } else if(tipo.equals("char") && !(valor.matches("\'[a-zA-Z0-9]+\'") || valor.equals("NULL"))) {
            errorSemantico = true;
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor + " <- error de tipo char");
        } else {
            listaTablasSimbolos.get(currentHash).add(tipo + ":" + id + " = " + valor);
        }
        lista.add(tipo);
        lista.add(id);
        lista.add(valor);
        listaTablasSimbolosSemantico.get(currentHash).add(lista);
    }

    public int buscarSimbolo (String id, ArrayList<ArrayList<String>> lista) {
        int index = -1;
        for (int i = 0; i < lista.size(); i++) {
            if (lista.get(i).get(1).equals(id)) {
                index = i;
                break;
            }
        }
        return index;
    }

    public void newTable(String name, String tipo) {
        ArrayList<ArrayList<String>> listas = new ArrayList<ArrayList<String>>();
        ArrayList<String> lista = new ArrayList<String>();
        currentHash = name;
        String tipoTabla = "Tipo:" + tipo + "-Funcion:" + name;
        lista.add(tipo);
        lista.add(name);
        lista.add("NULL");
        listas.add(lista);
        listaTablasSimbolosSemantico.put(currentHash, listas);

        ArrayList<String> lista2 = new ArrayList<String>();
        lista2.add(tipoTabla);
        listaTablasSimbolos.put(currentHash, lista2);

        if (!errorSemantico) {
            currentTemp = 0;
            cod3D.append("beginFunc"+name+":\n");
        }
    }

    public void imprimir3D() {
        System.out.println("Codigo 3D");
        System.out.println(cod3D.toString());
    }

    public void imprimirTablaSimbolos() {
        for (String key: listaTablasSimbolos.keySet()) {
            System.out.println("Tabla de simbolos: " + key);
            System.out.println("Identificador\tTipo\tValor");
            for (String id: listaTablasSimbolos.get(key)) {
                System.out.println(id);
            }
            System.out.println("\n");
        }
    }

    public static int potencia(int base, int exponente) {
        int resultado = 1;
        for (int i = 0; i < exponente; i++) {
            resultado *= base;
        }
        return resultado;
    }

    public void StringToFile() {
        String contenido = cod3D.toString();

        // Ruta del archivo de texto
        String rutaArchivo = "3D_Code.txt";

        try {
            // Crear un objeto File que representa el archivo
            File archivo = new File(rutaArchivo);

            // Crear un FileWriter para escribir en el archivo
            FileWriter fileWriter = new FileWriter(archivo);

            // Crear un BufferedWriter para mejorar el rendimiento de escritura
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

            // Crear un PrintWriter para escribir el contenido en el archivo
            PrintWriter printWriter = new PrintWriter(bufferedWriter);

            // Escribir el contenido en el archivo
            printWriter.println(contenido);

            // Cerrar los flujos
            printWriter.close();
            bufferedWriter.close();
            fileWriter.close();

            System.out.println("El archivo ha sido creado con éxito.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String obtenerDatoDeTabla(String id) {
        ArrayList<ArrayList<String>> tabla = listaTablasSimbolosSemantico.get(currentHash);
        int busqueda = buscarSimbolo(id, tabla);
        return listaTablasSimbolosSemantico.get(currentHash).get(busqueda).get(2);
    }

    public void existeEnTabla(String id) {
        ArrayList<ArrayList<String>> tabla = listaTablasSimbolosSemantico.get(currentHash);
        int busqueda = buscarSimbolo(id, tabla);
        if (busqueda==-1) {
            listaTablasSimbolos.get(currentHash).add(id + " <- error en la variable de switch");
            errorSemantico = true;
        }
    }

:}

parser code {:

    public static LinkedList<TError> TablaError = new LinkedList<TError>();

    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;
        System.out.println("Lexema erroneo: "+lexema+" Fila: "+ fila+1 +" Columna: "+ columna);
        
        TError datos = new TError(lexema,fila,columna,"ERROR SINTACTICO","ERROR DE CARACTER");
        TablaError.add(datos);
    }

    public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("Lexema erroneo=> "+lexema);
        System.out.println("Fila=> "+ fila+1);
        System.out.println("Columna=> " +columna);

        TError datos = new TError(lexema,fila,columna,"ERROR SINTACTICO","ERROR DE CARACTER");
        TablaError.add(datos);
    }
    
    // Connect this parser to a scanner!

    LexerCup lex;

 

    @SuppressWarnings("deprecation")

    public Sintax(LexerCup lex){

        this.lex=lex;

        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

init with {: :}

 
/* define how to connect to the scanner! */

scan with {: return lex.next_token(); :}

//Declaraciones terminales
terminal Char, Entero, Flotante, Booleano, Cadena, If, Else, While, For,
    Igual, Suma, Resta, Multiplicacion, Division, Potencia, Modulo, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Main, P_coma, Identificador, P_dospuntos, Case_, 
    Switch, Separador, Break, Return, Global, Float, Cadena_String, Cadena_Char, Coma, Default,
    Numero, Read, Write;

//Declaraciones no terminales 
non terminal PROGRAMA, TIPOS, EXPRESION, TERMINO, FACTOR, NUMEROS, CADENAS, SENTENCIA, SENTENCIAS,
    ASIGNACION, CREACION, CREACION_ASIGNACION, OPERA_RELACIONAL, OPERA_LOGICO, IF_ELSE, WHILE, FOREACH,
    GLOBALES, GLOBAL, MAIN, PARAMETROS, FUNCION, FUNCIONES, SWITCH, CASES, CASE_, RETURN, READ, WRITE, INICIO,
    FUNCION_CALL, PARAMETROS_CALL, PARAMETRO_CALL, FUNCION_CUERPO, MAIN_CUERPO, FUNCION_BODY, IF_ELSE_CUERPO,
    WHILE_CUERPO, FOR_EACH_CUERPO, SWITCH_CUERPO, PARAMETRO, DEFAULT_, CASES_, FOR_AISGNACION;

//Precedencias
precedence left Suma, Resta;
precedence left EXPRESION, P_coma;
precedence left OPERA_RELACIONAL, Op_relacional;
precedence left OPERA_LOGICO, Op_logico;
precedence left Multiplicacion, Division;
precedence left Entero, Flotante, Booleano, Cadena, Char;
precedence left PARAMETRO_CALL, OPERA_RELACIONAL;
precedence left ASIGNACION, CREACION_ASIGNACION, CREACION, IF_ELSE, WHILE,
    FOREACH, SWITCH, READ, WRITE, FUNCION_CALL, RETURN;
precedence left  If, Else;

start with INICIO;

//Producciones

INICIO ::=
    {: 
        System.out.println("PARCER: Inicio programa\n");
        newTable("globalTs", "global");
    :}
    PROGRAMA
    {: 
        imprimirTablaSimbolos();
        imprimir3D();
        StringToFile();
        System.out.println("PARCER: Final programa\n");
    :}
;

PROGRAMA ::=
    GLOBALES
    | MAIN
    | GLOBALES MAIN
    | GLOBALES MAIN FUNCIONES
    | MAIN FUNCIONES
    | FUNCIONES
    | GLOBALES FUNCIONES
;

FUNCIONES ::=
    FUNCION
    | FUNCION FUNCIONES
;

FUNCION_CUERPO ::=
    TIPOS:tVG Separador Identificador:idVG
    {:
        System.out.println("Inicio funcion");
        newTable(idVG.toString(), tVG.toString());
    :}
;

FUNCION ::=
    FUNCION_CUERPO FUNCION_BODY
;

FUNCION_BODY ::=
    Parentesis_a Parentesis_c Llave_a SENTENCIAS Llave_c
    | Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIAS Llave_c
    | error Llave_c
;

MAIN_CUERPO ::=
    TIPOS:tVG Separador Main:idVG
    {:
        System.out.println("Inicio main");
        newTable(idVG.toString(), tVG.toString());
    :}
;

MAIN ::=
    MAIN_CUERPO FUNCION_BODY
;

FUNCION_CALL ::=
    Identificador:idVG Parentesis_a Parentesis_c P_coma
    {:
        cod3D.append("goto " + idVG.toString());
    :}
    | Identificador:idVG Parentesis_a PARAMETROS_CALL Parentesis_c P_coma
    {:
        cod3D.append("goto " + idVG.toString());
    :}
;

PARAMETROS_CALL ::=
    PARAMETRO_CALL
    | PARAMETRO_CALL Coma PARAMETROS_CALL
;

PARAMETRO_CALL ::=
    CADENAS
    | OPERA_LOGICO
    | FUNCION_CALL
    | ASIGNACION
;

PARAMETRO ::=
    TIPOS:tVG Separador Identificador:idVG
    {:
        guardarTablaSimbolosCreacionAsig(idVG.toString(), tVG.toString(), "NULL");
        System.out.println("PARSER: identificador " + idVG.toString());
    :}
;

PARAMETROS ::=
    PARAMETRO
    | PARAMETRO Coma PARAMETROS
;

SENTENCIAS ::=
    SENTENCIA
    | SENTENCIA SENTENCIAS
;

SENTENCIA ::=
    ASIGNACION
    | CREACION_ASIGNACION
    | CREACION
    | IF_ELSE
    | WHILE
    | FOREACH
    | SWITCH
    | READ
    | WRITE
    | FUNCION_CALL
    | RETURN
;

READ ::=
    Read Parentesis_a Identificador Parentesis_c P_coma
;

WRITE ::=
    Write Parentesis_a Identificador Parentesis_c P_coma
;

RETURN ::=
    Return EXPRESION P_coma
    | Return P_coma
    | Return CADENAS P_coma
    | Return OPERA_LOGICO P_coma
    | Return NUMEROS P_coma
    | Return Identificador P_coma
;

GLOBALES ::=
    GLOBAL
    | GLOBAL GLOBALES
;

GLOBAL ::=
    Global Separador CREACION_ASIGNACION
    {:
        if (!errorSemantico) {
            cod3D.append("GLOBAL_DATA_");
            currentTemp++;
        }
    :}
    | Global Separador CREACION
    {:
        if (!errorSemantico) {
            cod3D.append("GLOBAL_DATA_");
            currentTemp++;
        }
    :}
;

SWITCH_CUERPO ::=
    Switch Parentesis_a Identificador:idVG Parentesis_c
    {:
        existeEnTabla(idVG.toString());
        casesCurrent = 0;
        if (!errorSemantico) {
            String temp = "t"+currentTemp;
            currentTemp++;
            cod3D.append("SWITCH_"+currentHash+":\n");
            cod3D.append(temp+idVG.toString()+":\n");
        }
    :}
;

SWITCH ::=
    SWITCH_CUERPO Llave_a CASES_ Llave_c
    {:
        if (!errorSemantico) {
            cod3D.append("END_SWITCH_"+currentHash+"\n");
        }
    :}
;

CASES_ ::=
    CASES DEFAULT_
;

CASES ::=
    CASES CASE_
    | CASE_
    {:
        if (!errorSemantico) {
            cod3D.append("END_CASE_"+currentHash+"_"+casesCurrent+":\n");
        }
        casesCurrent++;
    :}
;

DEFAULT_ ::=
    Default P_dospuntos SENTENCIAS Break P_coma
    {:
        if (!errorSemantico) {
            cod3D.append("Default_CASE_"+currentHash+"_"+casesCurrent+":\n");
        }
    :}
;

CASE_ ::=
    Case_ Separador NUMEROS:e P_dospuntos SENTENCIAS Break P_coma
    {:
        if (!errorSemantico) {
            cod3D.append("jumif "+(e.toString())+"==t"+(currentTemp-1)+" goto CASE_"+currentHash+"_"+casesCurrent+"\n");
            cod3D.append("goto END_CASE_"+currentHash+"_"+casesCurrent+"\n");
            cod3D.append("CASE_"+currentHash+"_"+casesCurrent+":\n");
        }
    :}
;

FOR_AISGNACION ::= 
    TIPOS:tVG1 Separador Identificador:idVG1 Igual Numero:e1
    {:
        guardarTablaSimbolosCreacionAsig(idVG1.toString(), tVG1.toString(), e1.toString());
        String temp1 = "";
        if (!errorSemantico) {
            currentTemp++;
            temp1 = "t"+currentTemp;
            
            cod3D.append(temp1+"="+e1.toString());
            cod3D.append(idVG1.toString()+"="+temp1+"\n");
            cod3D.append(idVG1.toString()+"="+e1.toString()+"\n");
        }
        RESULT = e1.toString()+":"+temp1;
    :}
;

FOR_EACH_CUERPO ::=
    For Parentesis_a FOR_AISGNACION:e1 P_coma OPERA_RELACIONAL:op P_coma Identificador:idVG2 Op_incremento:e2 Parentesis_c
    {:
        String[] resp2 = e1.toString().split(":");
        String[] resp = op.toString().split(":");
        if (!errorSemantico) {
            cod3D.append("PRE_FOREACH_"+currentHash+":\n");
            cod3D.append("jumif "+(resp[1])+" goto FOREACH_"+currentHash+"\n");
            cod3D.append("goto END_FOREACH_"+currentHash+"\n");
            cod3D.append("FOREACH_"+currentHash+":\n");
        }
        RESULT = resp2[0]+":"+resp2[1]+":"+e2.toString();
    :}
;

FOREACH ::=
    FOR_EACH_CUERPO:e Llave_a SENTENCIAS Llave_c
    {:
        if (!errorSemantico) {
            String[] resp = e.toString().split(":");
            cod3D.append(resp[1]+"="+resp[1]+"+1\n");
            cod3D.append("goto PRE_FOREACH_"+currentHash+"\n");
            cod3D.append("END_FOREACH_"+currentHash+":\n");
        }
    :}
;

WHILE_CUERPO ::=
    While Parentesis_a OPERA_LOGICO:e Parentesis_c
    {:
        String[] resp = e.toString().split(":");
        if (!errorSemantico) {
            cod3D.append("PRE_WHILE_"+currentHash+":\n");
            cod3D.append("jumif "+(resp[1])+" goto WHILE_"+currentHash+"\n");
            cod3D.append("goto END_WHILE_"+currentHash+"\n");
            cod3D.append("WHILE_"+currentHash+":\n");
        }
    :}
;

WHILE ::=
    WHILE_CUERPO Llave_a SENTENCIAS Llave_c
    {:
        if (!errorSemantico) {
            cod3D.append("goto PRE_WHILE_"+currentHash+"\n");
            cod3D.append("END_WHILE_"+currentHash+":\n");
        }
    :}
;

IF_ELSE_CUERPO ::=
    If Parentesis_a OPERA_LOGICO:e Parentesis_c
    {:
        String[] resp = e.toString().split(":");
        if (!errorSemantico) {
            cod3D.append("jumif "+(resp[1])+" goto IF_"+currentHash+"\n");
            cod3D.append("goto ELSE_"+currentHash+"\n");
            cod3D.append("IF_"+currentHash+":\n");
        }
    :}
    | Else
    {:
        if (!errorSemantico) {
            cod3D.append("ELSE_"+currentHash+":\n");
        }
    :}
;

IF_ELSE ::=
    IF_ELSE_CUERPO Llave_a SENTENCIAS Llave_c
    | IF_ELSE_CUERPO Llave_a SENTENCIAS Llave_c IF_ELSE_CUERPO Llave_a SENTENCIAS Llave_c
;

CREACION_ASIGNACION ::=
    TIPOS:tVG Separador Identificador:idVG Igual CADENAS:e P_coma
    {:
        String[] resp = e.toString().split(":");
        guardarTablaSimbolosCreacionAsig(idVG.toString(), tVG.toString(), resp[0]);
        System.out.println("PARSER: identificador " + idVG.toString());
        if (!errorSemantico) {
            cod3D.append(idVG.toString()+"= "+resp[1]+"\n");
        }
    :}
    | TIPOS:tVG Separador Identificador:idVG Igual EXPRESION:e P_coma
    {:
        String[] resp = e.toString().split(":");
        guardarTablaSimbolosCreacionAsig(idVG.toString(), tVG.toString(), resp[0]);
        System.out.println("PARSER: identificador " + idVG.toString());
        if (!errorSemantico) {
            cod3D.append(idVG.toString()+"= "+resp[1]+"\n");
        }
    :}
    | TIPOS:tVG Separador Identificador:idVG Igual OPERA_LOGICO:e P_coma
    {:
        String[] resp = e.toString().split(":");
        guardarTablaSimbolosCreacionAsig(idVG.toString(), tVG.toString(), resp[0]);
        System.out.println("PARSER: identificador " + idVG.toString());
        if (!errorSemantico) {
            cod3D.append(idVG.toString()+"= "+resp[1]+"\n");
        }
    :}
    | error P_coma
;

CREACION ::=
    TIPOS:tVG Separador Identificador:idVG P_coma
    {:
        guardarTablaSimbolosCreacionAsig(idVG.toString(), tVG.toString(), "NULL");
        System.out.println("PARSER: identificador " + idVG.toString());
    :}
;

ASIGNACION ::=
    Identificador:idVG  Op_atribucion:op EXPRESION:e P_coma
    {:
        guardarTablaSimbolosAsig(idVG.toString(), e.toString());
        System.out.println("PARSER: identificador " + idVG.toString());
        String[] resp = e.toString().split(":");
        if (!errorSemantico) {
            String temp1 = "t"+currentTemp;
            currentTemp++;
            String temp2 = "t"+currentTemp;
            currentTemp++;
            cod3D.append(temp1+"="+idVG.toString()+"\n");
            if (op.toString().equals("+=")) {
                cod3D.append(temp2+"="+temp1+"+"+resp[1]+"\n");
                cod3D.append(idVG.toString()+"="+temp2+"\n");
            } else if (op.toString().equals("-=")) {
                cod3D.append(temp2+"="+temp1+"-"+resp[1]+"\n");
                cod3D.append(idVG.toString()+"="+temp2+"\n");;
            } else if (op.toString().equals("*=")) {
                cod3D.append(temp2+"="+temp1+"*"+resp[1]+"\n");
                cod3D.append(idVG.toString()+"="+temp2+"\n");
            } else if (op.toString().equals("/=")) {
                cod3D.append(temp2+"="+temp1+"/"+resp[1]+"\n");
                cod3D.append(idVG.toString()+"="+temp2+"\n");
            }
        }
    :}
    | Identificador:idVG Igual EXPRESION:e P_coma
    {:
        String[] resp = e.toString().split(":");
        guardarTablaSimbolosAsig(idVG.toString(), resp[0].toString());
        System.out.println("PARSER: identificador " + idVG.toString());
        if (!errorSemantico) {
            cod3D.append(idVG.toString()+"= "+resp);
        }
    :}
    | Identificador:idVG Op_incremento:e P_coma
    {:
        String[] resp = e.toString().split(":");
        guardarTablaSimbolosAsig(idVG.toString(), resp[0].toString());
        System.out.println("PARSER: identificador " + idVG.toString());
        if (!errorSemantico) {  
            String temp1 = "t"+currentTemp;
            currentTemp++;
            String temp2 = "t"+currentTemp;
            currentTemp++;
            String temp3 = "t"+currentTemp;
            currentTemp++;
            cod3D.append(temp1+"="+(idVG.toString())+"\n");
            cod3D.append(temp2+"= 1\n");
            if (e.toString().equals("++")) {
                cod3D.append(temp3+"= "+temp1+"+"+temp2+"\n");
            } else {
                cod3D.append(temp3+"= "+temp1+"-"+temp2+"\n");
            }
            cod3D.append(idVG.toString()+"= "+temp3+"\n");
        }
    :}
    | Identificador:idVG Igual CADENAS:e P_coma
    {:
        String[] resp = e.toString().split(":");
        guardarTablaSimbolosAsig(idVG.toString(), resp[0].toString());
        System.out.println("PARSER: identificador " + idVG.toString());
        if (!errorSemantico) {
            cod3D.append(idVG.toString()+"= "+resp[1]+"\n");
        }
    :}
    | Identificador:idVG Igual OPERA_LOGICO:e P_coma
    {:
        String[] resp = e.toString().split(":");
        guardarTablaSimbolosAsig(idVG.toString(), resp[0].toString());
        System.out.println("PARSER: identificador " + idVG.toString());
        if (!errorSemantico) {
            cod3D.append(idVG.toString()+"= t"+resp[1]+"\n");
        }
    :}

;   

OPERA_RELACIONAL ::=
    OPERA_RELACIONAL:e1 Op_relacional:s OPERA_RELACIONAL:e2 
    {: 
        String[] resp1 = e1.toString().split(":");
        String[] resp2 = e2.toString().split(":");
        int res1 = Integer.parseInt(resp1[0].toString());
        int res2 = Integer.parseInt(resp2[0].toString());
        System.out.println("PARSER: Prueva en S ope " + s);
        String operador = s.toString();
        String respito = "";
        if (!errorSemantico) {
            respito = "t"+currentTemp;
            currentTemp++;
            if (operador.equals(">")) {

                cod3D.append(respito+"="+resp1[1]+" > "+resp2[1]+"\n");
            } else if (operador.equals("<")) { 

                cod3D.append(respito+"="+resp1[1]+" < "+resp2[1]+"\n");
            } else if (operador.equals("==")) {

                cod3D.append(respito+"="+resp1[1]+" == "+resp2[1]+"\n");
            } else if (operador.equals("!=")) {

                cod3D.append(respito+"="+resp1[1]+" != "+resp2[1]+"\n");
            } else if (operador.equals(">=")) {

                cod3D.append(respito+"="+resp1[1]+" >= "+resp2[1]+"\n");
            } else if (operador.equals("<=")) {

                cod3D.append(respito+"="+resp1[1]+" <= "+resp2[1]+"\n");
            }
        }

    RESULT = "true"+":"+respito;
    :}
    | EXPRESION:e {: RESULT = e; :}
;

OPERA_LOGICO ::=
    OPERA_LOGICO:e1 Op_logico:s OPERA_LOGICO:e2 
    {: 
        String[] resp1 = e1.toString().split(":");
        String[] resp2 = e2.toString().split(":");
        boolean res1 = Boolean.valueOf(resp1[0]).booleanValue();
        boolean res2 = Boolean.valueOf(resp2[0]).booleanValue();
        String operador = s.toString();
        String respito = "";
        if (!errorSemantico) {
            respito = "t"+currentTemp;
            currentTemp++;
            if (operador.equals("&&")) {

                cod3D.append(respito+"="+resp1[1]+" && "+resp2[1]+"\n");
            } else if (operador.equals("||")) {

                cod3D.append(respito+"="+resp1[1]+" || "+resp2[1]+"\n");
            } else if (operador.equals("!")) {

                cod3D.append(respito+"="+resp1[1]+" ! "+resp2[1]+"\n");
            } else if (operador.equals("&")) {

                cod3D.append(respito+"="+resp1[1]+" & "+resp2[1]+"\n");
            } else if (operador.equals("|")) {

                cod3D.append(respito+"="+resp1[1]+" | "+resp2[1]+"\n");
            } else if (operador.equals("==")) {

                cod3D.append(respito+"="+resp1[1]+" == "+resp2[1]+"\n");
            }
        }

        RESULT = "true"+":"+respito;

    :}
    | OPERA_RELACIONAL:e 
    {:
        RESULT = e;
    :}
    | Op_booleano:e 
    {: 
        String res = "";
        if (!errorSemantico) {
            res = "t"+currentTemp;
            cod3D.append(res+"="+e.toString()+"\n");
            currentTemp++;
        }
        RESULT = e+":"+res;
    :}
;

EXPRESION ::=
    TERMINO:e {: RESULT = e; :}
    | EXPRESION:e1 Suma TERMINO:e2 
    {: 
        String[] resp1 = e1.toString().split(":");
        String[] resp2 = e2.toString().split(":");
        int e_1 = Integer.parseInt(resp1[0].toString());
        int e_2 = Integer.parseInt(resp2[0].toString());
        int res= e_1 + e_2;
        String respito = "";
        if (!errorSemantico) {
            respito = "t"+currentTemp;
            currentTemp++;
            cod3D.append(respito+"="+resp1[1]+"+"+resp2[1]+"\n");
        }
        RESULT = res+":"+respito; 
    :}
    | EXPRESION:e1 Resta TERMINO:e2
    {: 
        String[] resp1 = e1.toString().split(":");
        String[] resp2 = e2.toString().split(":");
        int e_1 = Integer.parseInt(resp1[0].toString());
        int e_2 = Integer.parseInt(resp2[0].toString());
        int res= e_1 - e_2;
        String respito = "";
        if (!errorSemantico) {
            respito = "t"+currentTemp;
            currentTemp++;
            cod3D.append(respito+"="+resp1[1]+"-"+resp2[1]+"\n");
        }
        RESULT = res+":"+respito; 
    :}
;

TERMINO ::=
    FACTOR:e {: RESULT = e; :}
    | TERMINO:e1 Multiplicacion:s FACTOR:e2
    {: 
        String[] resp1 = e1.toString().split(":");
        String[] resp2 = e2.toString().split(":");
        int e_1 = Integer.parseInt(resp1[0].toString());
        int e_2 = Integer.parseInt(resp2[0].toString());
        int res= e_1 % e_2;
        String respito = "";
        if (!errorSemantico) {
            respito = "t"+currentTemp;
            currentTemp++;
            cod3D.append(respito+"="+resp1[1]+"*"+resp2[1]+"\n");
        }
        RESULT = res+":"+respito; 
    :}
    | TERMINO:e1 Division:s FACTOR:e2
    {: 
        String[] resp1 = e1.toString().split(":");
        String[] resp2 = e2.toString().split(":");
        int e_1 = Integer.parseInt(resp1[0].toString());
        int e_2 = Integer.parseInt(resp2[0].toString());
        int res= e_1 / e_2;
        String respito = "";
        if (!errorSemantico) {
            respito = "t"+currentTemp;
            currentTemp++;
            cod3D.append(respito+"="+resp1[1]+"/"+resp2[1]+"\n");
        }
        RESULT = res+":"+respito; 
    :}
    | TERMINO:e1 Potencia:s FACTOR:e2
    {: 
        String[] resp1 = e1.toString().split(":");
        String[] resp2 = e2.toString().split(":");
        int e_1 = Integer.parseInt(resp1[0].toString());
        int e_2 = Integer.parseInt(resp2[0].toString());
        int res= e_1 ^ e_2;
        String respito = "";
        if (!errorSemantico) {
            respito = "t"+currentTemp;
            currentTemp++;
            cod3D.append(respito+"="+resp1[1]+"^"+resp2[1]+"\n");
        }
        RESULT = res+":"+respito; 
    :}
    | TERMINO:e1 Modulo:s FACTOR:e2
    {: 
        String[] resp1 = e1.toString().split(":");
        String[] resp2 = e2.toString().split(":");
        int e_1 = Integer.parseInt(resp1[0].toString());
        int e_2 = Integer.parseInt(resp2[0].toString());
        int res= e_1 % e_2;
        String respito = "";
        if (!errorSemantico) {
            respito = "t"+currentTemp;
            currentTemp++;
            cod3D.append(respito+"="+resp1[1]+"%"+resp2[1]+"\n");
        }
        RESULT = res+":"+respito; 
    :}
;

FACTOR ::=
    NUMEROS:e {: RESULT = e; :}
    | Identificador:e
    {:
        String res = "";
        String recope = "";
        // existeEnTabla(e.toString());
        if (!errorSemantico) {
            res = "t"+currentTemp;
            cod3D.append("t"+currentTemp+"="+e.toString()+"\n");
            currentTemp++;
            recope = obtenerDatoDeTabla(e.toString());
        }
        
        RESULT = e.toString()+":"+res;
    :}
    | Parentesis_a EXPRESION:e Parentesis_c {: RESULT = e; :}
;

TIPOS ::= 
      Entero {: RESULT = "int"; :}
    | Flotante {: RESULT = "float"; :}
    | Booleano {: RESULT = "bool"; :}
    | Cadena {: RESULT = "string"; :}
    | Char {: RESULT = "char"; :}
;

NUMEROS ::=
    Float:e 
    {:
        String res = "";
        if (!errorSemantico) {
            res = "t"+currentTemp;
            cod3D.append(res+"="+e.toString()+"\n");
            currentTemp++;
        }
        RESULT = e+":"+res;
    :}
    | Numero:e
    {:
        String res = "";
        if (!errorSemantico) {
            res = "t"+currentTemp;
            cod3D.append(res+"="+e.toString()+"\n");
            currentTemp++;
        }
        RESULT = e+":"+res;
    :}
;

CADENAS ::=
    Cadena_Char:e
    {:
        String res = "";
        if (!errorSemantico) {
            res = "t"+currentTemp;
            cod3D.append(res+"="+e.toString()+"\n");
            currentTemp++;
        }
        RESULT = e+":"+res;
    :}
    | Cadena_String:e
    {:
        String res = "";
        if (!errorSemantico) {
            res = "t"+currentTemp;
            cod3D.append(res+"="+e.toString()+"\n");
            currentTemp++;
        }
        RESULT = e+":"+res;
    :}
;