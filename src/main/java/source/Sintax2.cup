package source;

import java_cup.runtime.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

action code {:
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash = "globalTs";
    String globalHash = "globalTs";

    public void imprimirTablaSimbolos() {
        for (String key: listaTablasSimbolos.keySet()) {
            System.out.println("Tabla de simbolos: " + key);
            System.out.println("Identificador\tTipo\tValor");
            for (String id: listaTablasSimbolos.get(key)) {
                System.out.println(id);
            }
            System.out.println("\n");
        }
    }
:}

parser code {:

    // Connect this parser to a scanner!

    LexerCup lex;

 

    @SuppressWarnings("deprecation")

    public Sintax(LexerCup lex){

        this.lex=lex;

        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

init with {: :}

 
/* define how to connect to the scanner! */

scan with {: return lex.next_token(); :}

//Declaraciones terminales
terminal Entero, Flotante, Condicionales, Comillas, T_dato, Cadena, If, Else, While, For,
    Igual, Suma, Resta, Multiplicacion, Division, Potencia, Modulo, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Identificador, P_dospuntos, Case_, 
    Switch, Separador, Break, Return, Func, Global, Float, Caracteres, Coma, Default,
    Numero, Read, Write, ERROR;

//Declaraciones no terminales 
non terminal PROGRAMA, SENTENCIA, DECLARACION, IF, SENTENCIA_BOOLEANA, WHILE, FOR, ASIGNACION, 
    FUNCIONES_DECLARACION, PARAMETRO, PARAMETROS, DECLARACIOON_SWITCH, CASE, CASE_LIST, FUNCTION_CALL,
    OPERACION_ARIT, GLOBALES, MAIN, READ, WRITE, FUNC, TIPOS;

//Precedencias
//precedence left P_coma;
precedence left TIPOS;
precedence left Cadena;
precedence left If;
precedence left While;
precedence left PARAMETROS, Parentesis_c; //Esta precedencia es utilizada para eliminar los problemas al escoger entre la lista de parametros de una funcion y el parentesis de cierre. ejemplo : f(a,b,c){}->el contenido a,b,c estaba entrando en conflicto con el parentesis decierre antes del precedence. 
precedence left OPERACION_ARIT, Suma, Resta, Multiplicacion, Division, Potencia, Modulo;
precedence left FUNCIONES_DECLARACION, FUNC;
precedence left TIPOS, Entero, Flotante, Condicionales, Main;
precedence left PROGRAMA, GLOBALES, TIPOS, MAIN, FUNCIONES_DECLARACION, FUNC;

start with PROGRAMA;


PROGRAMA ::=
    {: 
        System.out.println("PARCER: Inicio programa\n"); 
        currentHash = "main";
        ArrayList<String> lista = new ArrayList<String>();
        String tipoTabla = "Tipo: Funcion: main";
        lista.add(tipoTabla);
        listaTablasSimbolos.put(currentHash, lista);
        System.out.println("PARSER: identificador (agregar o verificar) main");
    :}
    MAIN
    {: 
        imprimirTablaSimbolos();
        System.out.println("PARCER: Final programa\n");
    :} |
    {: 
        System.out.println("PARCER: Inicio programa\n"); 
        listaTablasSimbolos.put(globalHash, new ArrayList<String>());
    :}
    GLOBALES MAIN FUNCIONES_DECLARACION
    {: 
        imprimirTablaSimbolos();
        System.out.println("PARCER: Final programa\n");
    :} 

;

MAIN::=
    TIPOS:tVG Separador Main:idVG Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    TIPOS:tVG Separador Main:idVG Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c |
;

FUNCIONES_DECLARACION ::=
    FUNCIONES_DECLARACION FUNC|
    FUNC
;

FUNC ::=
    TIPOS:tVG Separador Func Separador Identificador:idVG Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
    {:
        System.out.println("Inicio funcion");
        ArrayList<String> lista = new ArrayList<String>();
        currentHash = idVG.toString();
        String tipoTabla = "Tipo: Funcion: " + tVG.toString();
        lista.add(tipoTabla);
        listaTablasSimbolos.put(currentHash, lista);
    :} |
    TIPOS:tVG Separador Func Separador Identificador:idVG Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c
    {:
        System.out.println("Inicio funcion");
        ArrayList<String> lista = new ArrayList<String>();
        currentHash = idVG.toString();
        String tipoTabla = "Tipo: Funcion: " + tVG.toString();
        lista.add(tipoTabla);
        listaTablasSimbolos.put(currentHash, lista);
    :}
;

PARAMETRO::= TIPOS:tVG Identificador:idVG {: listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
                     System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString()); :}
;

PARAMETROS::= PARAMETROS Coma PARAMETRO 
    |
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA FOR |
    FOR |
    SENTENCIA DECLARACIOON_SWITCH |
    DECLARACIOON_SWITCH |
    SENTENCIA FUNCTION_CALL |
    FUNCTION_CALL|
    SENTENCIA SENTENCIA_BOOLEANA:e {:System.out.println(e.toString()); :}  |
    SENTENCIA_BOOLEANA:e {:System.out.println(e.toString()); :} |
    SENTENCIA OPERACION_ARIT:e {:System.out.println(e.toString()); :} |
    OPERACION_ARIT:e {:System.out.println(e.toString()); :} |
    SENTENCIA READ |
    READ |
    SENTENCIA WRITE|
    WRITE|
    Return
;

DECLARACIOON_SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a CASE_LIST Llave_c
;

CASE ::= Case_ Numero P_dospuntos SENTENCIA Break P_coma
      | Default P_dospuntos SENTENCIA
;

CASE_LIST ::= 
    CASE CASE_LIST
    |   CASE
;

FUNCTION_CALL::=
    Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a SENTENCIA Llave_c
;

DECLARACION ::= 
    TIPOS:tVG Separador Identificador:idVG P_coma 
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} | 
    TIPOS:tVG Separador Identificador:idVG Op_atribucion Numero P_coma 
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} 
    |
    TIPOS:tVG Separador Identificador:idVG Igual Numero P_coma 
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} 
    |
    TIPOS:tVG Separador Identificador:idVG Op_incremento P_coma 
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} | 
    TIPOS:tVG Separador Op_incremento Identificador:idVG P_coma 
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} |
    Cadena:tVG Separador Identificador:idVG Op_atribucion Comillas Comillas P_coma 
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} |
    Cadena:tVG Separador Identificador:idVG Igual Comillas Comillas P_coma 
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} |
    Cadena:tVG Separador Identificador:idVG Op_atribucion Identificador P_coma 
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} |
    Cadena:tVG Separador Identificador:idVG Op_atribucion Caracteres P_coma 
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} |
    TIPOS:tVG Separador Identificador:idVG Igual FUNCTION_CALL P_coma
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} |
    TIPOS:tVG Separador Identificador:idVG Igual SENTENCIA_BOOLEANA P_coma
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :} |
    TIPOS:tVG Separador Identificador:idVG Igual OPERACION_ARIT P_coma
    {: 
        listaTablasSimbolos.get(currentHash).add(tVG.toString() + ":" + idVG.toString());
        System.out.println("PARSER: identificador (agregar o verificar) " + tVG.toString());
    :}
;

GLOBALES::= 
    GLOBALES Global Separador DECLARACION
    | Global Separador DECLARACION
;

IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Parentesis_c Llave_a SENTENCIA Llave_c |
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador:e1 Op_relacional:sigVG Op_booleano:e2 {: RESULT = e1.toString() + sigVG + e2.toString(); System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Op_relacional:sigVG Numero:e2 {: RESULT = e1.toString() + sigVG + e2.toString(); System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Op_relacional:sigVG Identificador:e2 {: RESULT = e1.toString() + sigVG + e2.toString(); System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Op_relacional:sigVG Caracteres:e2 {: RESULT = e1.toString() + sigVG + e2.toString(); System.out.println(e1+"\n"+e1); :}
;

WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

FOR ::=
    For Parentesis_a Numero P_coma SENTENCIA_BOOLEANA P_coma ASIGNACION P_coma Parentesis_c Llave_a SENTENCIA Llave_c
;

ASIGNACION::=
    Identificador Igual Numero | 
    Identificador Op_incremento |
    Op_incremento Identificador 
;

OPERACION_ARIT::= 
    Numero:e1 Suma Numero:e2 {: RESULT = e1 + "+" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Resta Numero:e2 {: RESULT = e1 + "-" + e2; System.out.println(e1+"\n"+e1); :}| 
    Numero:e1 Multiplicacion Numero:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Division Numero:e2 {: RESULT = e1 + "/" + e2; System.out.println(e1+"\n"+e1); :}| 
    Numero:e1 Potencia Numero:e2 {: RESULT = e1 + "**" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Modulo Numero:e2 {: RESULT = e1 + "%" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Suma OPERACION_ARIT:e2 {: RESULT = e1 + "+" + e2; System.out.println(e1+"\n"+e1); :}| 
    Numero:e1 Resta OPERACION_ARIT:e2 {: RESULT = e1 + "-" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Multiplicacion OPERACION_ARIT:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Division OPERACION_ARIT:e2 {: RESULT = e1 + "/" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Potencia OPERACION_ARIT:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}| 
    Numero:e1 Modulo OPERACION_ARIT:e2 {: RESULT = e1 + "%" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Suma Identificador:e2 {: RESULT = e1 + "+" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Resta Identificador:e2 {: RESULT = e1 + "-" + e2; System.out.println(e1+"\n"+e1); :}| 
    Numero:e1 Multiplicacion Identificador:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Division Identificador:e2 {: RESULT = e1 + "/" + e2; System.out.println(e1+"\n"+e1); :}| 
    Numero:e1 Potencia Identificador:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    Numero:e1 Modulo Identificador:e2 {: RESULT = e1 + "%" + e2; System.out.println(e1+"\n"+e1); :}|
    OPERACION_ARIT:e1 Suma Numero:e2 {: RESULT = e1 + "+" + e2; System.out.println(e1+"\n"+e1); :}|
    OPERACION_ARIT:e1 Resta Numero:e2 {: RESULT = e1 + "-" + e2; System.out.println(e1+"\n"+e1); :}| 
    OPERACION_ARIT:e1 Multiplicacion Numero:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    OPERACION_ARIT:e1 Division Numero:e2 {: RESULT = e1 + "/" + e2; System.out.println(e1+"\n"+e1); :}| 
    OPERACION_ARIT:e1 Potencia Numero:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    OPERACION_ARIT:e1 Modulo Numero:e2 {: RESULT = e1 + "%" + e2; System.out.println(e1+"\n"+e1); :}|
    OPERACION_ARIT:e1 Suma Identificador:e2 {: RESULT = e1 + "+" + e2; System.out.println(e1+"\n"+e1); :}|
    OPERACION_ARIT:e1 Resta Identificador:e2 {: RESULT = e1 + "-" + e2; System.out.println(e1+"\n"+e1); :}| 
    OPERACION_ARIT:e1 Multiplicacion Identificador:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    OPERACION_ARIT:e1 Division Identificador:e2 {: RESULT = e1 + "%" + e2; System.out.println(e1+"\n"+e1); :}| 
    OPERACION_ARIT:e1 Potencia Identificador:e2 {: RESULT = e1 + "**" + e2; System.out.println(e1+"\n"+e1); :}|
    OPERACION_ARIT:e1 Modulo Identificador:e2 {: RESULT = e1 + "%" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Suma Identificador:e2 {: RESULT = e1 + "+" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Resta Identificador:e2 {: RESULT = e1 + "-" + e2; System.out.println(e1+"\n"+e1); :}| 
    Identificador:e1 Multiplicacion Identificador:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Division Identificador:e2 {: RESULT = e1 + "/" + e2; System.out.println(e1+"\n"+e1); :}| 
    Identificador:e1 Potencia Identificador:e2 {: RESULT = e1 + "**" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Modulo Identificador:e2 {: RESULT = e1 + "%" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Suma OPERACION_ARIT:e2 {: RESULT = e1 + "+" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Resta  OPERACION_ARIT:e2 {: RESULT = e1 + "-" + e2; System.out.println(e1+"\n"+e1); :}| 
    Identificador:e1 Multiplicacion OPERACION_ARIT:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Division OPERACION_ARIT:e2 {: RESULT = e1 + "/" + e2; System.out.println(e1+"\n"+e1); :}| 
    Identificador:e1 Potencia OPERACION_ARIT:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Modulo OPERACION_ARIT:e2 {: RESULT = e1 + "%" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Suma Numero:e2 {: RESULT = e1 + "+" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Resta  Numero:e2 {: RESULT = e1 + "-" + e2; System.out.println(e1+"\n"+e1); :}| 
    Identificador:e1 Multiplicacion Numero:e2 {: RESULT = e1 + "*" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Division Numero:e2 {: RESULT = e1 + "/" + e2; System.out.println(e1+"\n"+e1); :}| 
    Identificador:e1 Potencia Numero:e2 {: RESULT = e1 + "**" + e2; System.out.println(e1+"\n"+e1); :}|
    Identificador:e1 Modulo Numero:e2 {: RESULT = e1 + "%" + e2; System.out.println(e1+"\n"+e1); :}
; 

TIPOS::= 
      Entero {: RESULT = "int"; :}
    | Flotante {: RESULT = "float"; :}
    | Condicionales {: RESULT = "bool"; :}
;

READ::= Read Parentesis_a Identificador Parentesis_a P_coma
;

WRITE::= Write Parentesis_a Identificador Parentesis_a P_coma
;